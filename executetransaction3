 private static void executeTransaction3(Connection connection, JTextArea textArea) throws SQLException {
        try {
            // Initialize next POLineID3
            initializeNextPOLineID3(connection);
    
            // Display list of Suppliers
            String getSuppliersQuery3 = "SELECT SupplierID, SupplierName FROM Supplier";
            try (Statement getSuppliersStmt3 = connection.createStatement();
                 ResultSet suppliersRS3 = getSuppliersStmt3.executeQuery(getSuppliersQuery3)) {
    
                StringBuilder suppliersList3 = new StringBuilder("Suppliers List:\n");
                DefaultComboBoxModel<String> supplierModel3 = new DefaultComboBoxModel<>();
                while (suppliersRS3.next()) {
                    String supplierID3 = suppliersRS3.getString("SupplierID");
                    String supplierName3 = suppliersRS3.getString("SupplierName");
                    suppliersList3.append(supplierID3).append(" - ").append(supplierName3).append("\n");
                    supplierModel3.addElement(supplierID3 + " - " + supplierName3);
                }
    
                JOptionPane.showMessageDialog(null, suppliersList3.toString(), "Supplier Selection", JOptionPane.INFORMATION_MESSAGE);
    
                // Prompt for Supplier ID
                JComboBox<String> supplierComboBox3 = new JComboBox<>(supplierModel3);
                int result3 = JOptionPane.showConfirmDialog(null, supplierComboBox3, "Select Supplier ID", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (result3 == JOptionPane.OK_OPTION) {
                    String selectedSupplier3 = (String) supplierComboBox3.getSelectedItem();
                    String supplierID3 = selectedSupplier3.split(" - ")[0];
    
                    // Prompt for Order Status
                    String[] statuses3 = { "Pending", "Completed", "Cancelled" };
                    JComboBox<String> statusComboBox3 = new JComboBox<>(statuses3);
                    int statusResult3 = JOptionPane.showConfirmDialog(null, statusComboBox3, "Select Order Status", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
                    if (statusResult3 == JOptionPane.OK_OPTION) {
                        String selectedStatus3 = (String) statusComboBox3.getSelectedItem();
    
                        // Create Purchase Order
                        String newPurchaseOrderID3 = getNextPurchaseOrderID3(connection);
                        String createPurchaseOrderQuery3 = "INSERT INTO PurchaseOrder (PurchaseOrderID, SupplierID, OrderDate, OrderStatus, TotalCost) VALUES (?, ?, CURRENT_DATE, ?, 0)";
                        try (PreparedStatement createPurchaseOrderStmt3 = connection.prepareStatement(createPurchaseOrderQuery3)) {
                            createPurchaseOrderStmt3.setString(1, newPurchaseOrderID3);
                            createPurchaseOrderStmt3.setString(2, supplierID3);
                            createPurchaseOrderStmt3.setString(3, selectedStatus3);
                            createPurchaseOrderStmt3.executeUpdate();
                        }
    
                        // Add Purchase Order Lines and Update Stock
                        String addPOLineQuery3 = "INSERT INTO PurchaseOrderLine (PurchaseOrderLineID, ProductID, PurchaseOrderID, Cost, Quantity, Subtotal) VALUES (?, ?, ?, ?, ?, ?)";
                        try (PreparedStatement addPOLineStmt3 = connection.prepareStatement(addPOLineQuery3)) {
                            String getProductsQuery3 = "SELECT ProductID, ProductName FROM Products";
                            try (Statement getProductsStmt3 = connection.createStatement();
                                 ResultSet productsRS3 = getProductsStmt3.executeQuery(getProductsQuery3)) {
    
                                DefaultComboBoxModel<String> productModel3 = new DefaultComboBoxModel<>();
                                while (productsRS3.next()) {
                                    String productID3 = productsRS3.getString("ProductID");
                                    String productName3 = productsRS3.getString("ProductName");
                                    productModel3.addElement(productID3 + " - " + productName3);
                                }
    
                                double totalCost3 = 0;
                                boolean addMoreProducts3 = true;
    
                                while (addMoreProducts3) {
                                    JComboBox<String> productComboBox3 = new JComboBox<>(productModel3);
                                    int productResult3 = JOptionPane.showConfirmDialog(null, productComboBox3, "Select Product ID", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
                                    if (productResult3 == JOptionPane.OK_OPTION) {
                                        String selectedProduct3 = (String) productComboBox3.getSelectedItem();
                                        String productID3 = selectedProduct3.split(" - ")[0];
    
                                        // Validate product existence
                                        if (!productExists3(connection, productID3)) {
                                            textArea.setText("Product ID " + productID3 + " does not exist.");
                                            return;
                                        }
    
                                        int quantity3 = Integer.parseInt(JOptionPane.showInputDialog(null, "Enter quantity for product:", "Product Input", JOptionPane.QUESTION_MESSAGE));
                                        double cost3 = Double.parseDouble(JOptionPane.showInputDialog(null, "Enter cost for product:", "Product Input", JOptionPane.QUESTION_MESSAGE));
    
                                        if (quantity3 <= 0 || cost3 <= 0) {
                                            JOptionPane.showMessageDialog(null, "Invalid quantity or cost.");
                                            return;
                                        }
    
                                        // Get the next POLineID3 for each iteration
                                        String poLineID3 = getNextPOLineID3();
    
                                        double subtotal3 = quantity3 * cost3;
                                        totalCost3 += subtotal3;
    
                                        addPOLineStmt3.setString(1, poLineID3);
                                        addPOLineStmt3.setString(2, productID3);
                                        addPOLineStmt3.setString(3, newPurchaseOrderID3);
                                        addPOLineStmt3.setDouble(4, cost3);
                                        addPOLineStmt3.setInt(5, quantity3);
                                        addPOLineStmt3.setDouble(6, subtotal3);
                                        addPOLineStmt3.addBatch();
    
                                        // Update stock
                                        String updateStockQuery3 = "UPDATE Products SET QuantityInStock = QuantityInStock + ? WHERE ProductID = ?";
                                        try (PreparedStatement updateStockStmt3 = connection.prepareStatement(updateStockQuery3)) {
                                            updateStockStmt3.setInt(1, quantity3);
                                            updateStockStmt3.setString(2, productID3);
                                            updateStockStmt3.executeUpdate();
                                        }
    
                                        // Ask if the user wants to add more products
                                        int continueResult3 = JOptionPane.showConfirmDialog(null, "Do you want to add another product?", "Continue Adding Products", JOptionPane.YES_NO_OPTION);
                                        if (continueResult3 == JOptionPane.NO_OPTION) {
                                            addMoreProducts3 = false;
                                        }
                                    } else {
                                        textArea.setText("Transaction cancelled.");
                                        return;
                                    }
                                }
    
                                addPOLineStmt3.executeBatch();
    
                                // Update Total Cost of Purchase Order
                                String updatePOCostQuery3 = "UPDATE PurchaseOrder SET TotalCost = ? WHERE PurchaseOrderID = ?";
                                try (PreparedStatement updatePOCostStmt3 = connection.prepareStatement(updatePOCostQuery3)) {
                                    updatePOCostStmt3.setDouble(1, totalCost3);
                                    updatePOCostStmt3.setString(2, newPurchaseOrderID3);
                                    updatePOCostStmt3.executeUpdate();
                                }
    
                                textArea.setText("Transaction 3: Restock Inventory executed successfully.");
                            }
                        }
                    } else {
                        textArea.setText("Transaction cancelled.");
                    }
                } else {
                    textArea.setText("Transaction cancelled.");
                }
            }
        } catch (SQLException e) {
            textArea.setText("Error in restocking inventory: " + e.getMessage());
            e.printStackTrace();
            throw e;
        }
    }
    

private static int nextPOLineID3 = 0;

private static void initializeNextPOLineID3(Connection connection) throws SQLException {
    String getLastPOLineIDQuery3 = "SELECT COALESCE(MAX(CAST(SUBSTRING(PurchaseOrderLineID, 5) AS UNSIGNED)), 0) AS LastID FROM PurchaseOrderLine";
    try (Statement getLastPOLineIDStmt3 = connection.createStatement();
         ResultSet resultSet3 = getLastPOLineIDStmt3.executeQuery(getLastPOLineIDQuery3)) {
        if (resultSet3.next()) {
            nextPOLineID3 = resultSet3.getInt("LastID") + 1;
        } else {
            nextPOLineID3 = 1; // Start with 1 if no records are found
        }
    }
}

private static String getNextPOLineID3() {
    return "POL-" + String.format("%03d", nextPOLineID3++);
}
    
    
private static boolean productExists3(Connection connection, String productID3) throws SQLException {
    String checkProductQuery3 = "SELECT COUNT(*) FROM Products WHERE ProductID = ?";
    PreparedStatement checkProductStmt3 = connection.prepareStatement(checkProductQuery3);
    checkProductStmt3.setString(1, productID3);
    ResultSet resultSet3 = checkProductStmt3.executeQuery();
    resultSet3.next();
    return resultSet3.getInt(1) > 0;
}

    
private static String getNextPurchaseOrderID3(Connection connection) throws SQLException {
    // Query to get the maximum PurchaseOrderID from the PurchaseOrder table
    String getMaxPurchaseOrderIDQuery3 = "SELECT COALESCE(MAX(CAST(SUBSTRING(PurchaseOrderID, 4) AS UNSIGNED)), 0) AS MaxPurchaseOrderID FROM PurchaseOrder";
    Statement getMaxPurchaseOrderIDStmt3 = connection.createStatement();
    ResultSet resultSet3 = getMaxPurchaseOrderIDStmt3.executeQuery(getMaxPurchaseOrderIDQuery3);

    // Retrieve the maximum ID and increment it
    int nextPurchaseOrderID3 = 0;
    if (resultSet3.next()) {
        nextPurchaseOrderID3 = resultSet3.getInt("MaxPurchaseOrderID") + 1;
    }

    return "PO-" + String.format("%03d", nextPurchaseOrderID3); // Return as varchar with "PO-" prefix
}

    
